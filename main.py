import time
from os.path import join, dirname, realpath
import time
import threading
import signal

import numpy as np
from anytree import Node

from core.event_log_parser import EventLogParser
from core.model import Model
from util.set_interval import SetInterval

EVTX_FILE_PATH = 'C:\Windows\System32\winevt\Logs\Microsoft-Windows-Sysmon%4Operational.evtx'
is_exit = False
root = Node("root", item=[])
evt = EventLogParser(exported_log_file=EVTX_FILE_PATH, node_root=root)

def handler(signum, frame):
    global is_exit
    is_exit = True
 
signal.signal(signal.SIGINT, handler)

def execute():
    print('Executing...')
    evt.get_all_events()
    model = Model(evt.current_event_logs)
    model.execute()

def main():
    global is_exit

    execute()
    inter = SetInterval(10, execute)

    while True:
        if is_exit == True:
            inter.cancel()
            exit(0)

    # end = time.time()

    # print('Total processed: ', len(model.get_result()))
    # unique, counts = np.unique(np.array(model.get_result()), return_counts=True)
    # print(dict(zip(unique, counts)))
    # print('Final result: ', model.get_result())
    # print('Total events: ', evt.total)

if __name__ == '__main__':
    main()