import win32evtlog
import xml.etree.ElementTree as Et

from model.event_log import EventLog

class EventLogParser:
    def __init__(self, exported_log_file):
        self.exported_log_file = exported_log_file
        self.file_size = 0
        self.event_logs = []
        self.total = 0

    def export_details(self, event: EventLog, id):
        with open(f"event{id}.xml", "w") as f:
            for attribute, value in event.__dict__.items():
                f.write(f"{attribute}: {value}\n")
            f.write("\n")

    def get_all_events(self):
        query_handle = win32evtlog.EvtQuery(str(self.exported_log_file),
            win32evtlog.EvtQueryFilePath | win32evtlog.EvtQueryReverseDirection)
        while True:
            raw_event_collection = win32evtlog.EvtNext(query_handle, 1)
            if len(raw_event_collection) == 0:
                break
            for raw_event in raw_event_collection:
                event = self.parse_raw_event(raw_event)

                self.export_details(event)
                self.total += 1
                self.event_logs.append(self.parse_raw_event(raw_event))

    def parse_raw_event(self, raw_event):
        xml_content = win32evtlog.EvtRender(
            raw_event, win32evtlog.EvtRenderEventXml)
        root = Et.fromstring(xml_content)
        ns = "{" + root.tag.split('}')[0].strip('{') + "}"
        
        event = EventLog()

        # SYSTEM
        system = root.find(f'{ns}System')
 
        event.set_event_id(system.find(f'{ns}EventID').text)
        event.set_version(system.find(f'{ns}Version').text)
        event.set_level(system.find(f'{ns}Level').text)
        event.set_task(system.find(f'{ns}Task').text)
        event.set_opcode(system.find(f'{ns}Opcode').text)
        event.set_keywords(system.find(f'{ns}Keywords').text)
        event.set_event_record_id(system.find(f'{ns}EventRecordID').text)
        event.set_correlation(system.find(f'{ns}Correlation').text)
        event.set_computer(system.find(f'{ns}Computer').text)
        event.set_channel(system.find(f'{ns}Channel').text)
        event.set_name(system.find(f'{ns}Provider').get('Name'))
        event.set_guid(system.find(f'{ns}Provider').get('Guid'))
        event.set_time_created(system.find(f'{ns}TimeCreated').get('SystemTime'))
        event.set_execution_process_id(system.find(f'{ns}Execution').get('ProcessID'))
        event.set_execution_thread_id(system.find(f'{ns}Execution').get('ThreadID'))
        event.set_user_id(system.find(f'{ns}Security').get('UserID'))

        # EVENT DATA
        event_datas = root.find(f'{ns}EventData').findall(f'{ns}Data')

        for event_data in event_datas:
            setattr(event, event.map_event_key(event_data.get('Name')), event_data.text)
        
        return event