import win32evtlog
import xml.etree.ElementTree as Et
from datetime import datetime
from anytree import search, Node

from core.event_log import EventLog
from util.util import EVENT_KEY_MAPPING

class EventLogParser:
    def __init__(self, exported_log_file, node_root):
        self.exported_log_file = exported_log_file
        self.node_root = node_root
        self.parent_node = None
        self.file_size = 0
        self.event_logs = []
        self.total = 0
        self.xml_content = None
        self.root = None
        self.ns = None
        self.node = None

    def export_details(self, event: EventLog, id):
        with open(f"event{id}.xml", "w") as f:
            for attribute, value in event.__dict__.items():
                f.write(f"{attribute}: {value}\n")
            f.write("\n")

    def get_all_events(self):
        query_handle = win32evtlog.EvtQuery(str(self.exported_log_file),
            win32evtlog.EvtQueryFilePath | win32evtlog.EvtQueryReverseDirection)

        while True:
            raw_event_collection = win32evtlog.EvtNext(query_handle, 1)
            if len(raw_event_collection) == 0:
                break
            for raw_event in raw_event_collection:
                event_log = self.parse_raw_event(raw_event)
                self.event_logs.append( event_log.__dict__ )
                self.total += 1

    def get_system_data(self, system, is_text, key, value = None):
        if is_text:
            return system.find(f'{self.ns}{key}').text
        return system.find(f'{self.ns}{key}').get(value)
    
    def get_all_event_data(self):
        return self.root.find(f'{self.ns}EventData').findall(f'{self.ns}Data')

    def parse_raw_event(self, raw_event):
        self.xml_content = win32evtlog.EvtRender(
            raw_event, win32evtlog.EvtRenderEventXml)
        self.root = Et.fromstring(self.xml_content)
        self.ns = "{" + self.root.tag.split('}')[0].strip('{') + "}"
        
        event_log = EventLog()

        # set system data
        system = self.root.find(f'{self.ns}System')
        event_id = self.get_system_data(
            system=system,
            is_text=True,
            key='EventID'
        )
        event_log.set_event_id(event_id)
        
        # set event data
        event_datas = self.get_all_event_data()
        for event_data in event_datas:
            key = event_data.get('Name')
            key_mapping = EVENT_KEY_MAPPING.get(key, None)
            if key_mapping:
                setattr(event_log, key_mapping, event_data.text)


        process_guid = event_data.get("SourceProcessGuid") if event_id == "8" else event_data.get("ProcessGuid")

        # set parent
        if event_id == '1':
            self.parent_node = search.find_by_attr(self.node_root, event_log.get_parent_process_guid())
        else:
            self.parent_node = search.find_by_attr(self.node_root, process_guid)

        # set node_id
        # node_id = None
        # if event_id == '1':
        #     node_id = event_log.get_process_guid()
        # elif event_id == '8':
        #     node_id = event_id +  event_log.get_target_process_guid()
        # else:
        #     node_id = event_id +  event_log.get_process_guid()
        # event_log.set_node_id(node_id)


        # TODO: label is now hardcoded
        event_log.set_label(1)

        # if self.parent_node == None:
        #     self.parent_node = self.node_root
        #     if event_id == '1':
        #         event_log.set_label( 1 if ('VirusShare' in event_log.get_image()) else 0 )
        #     else:
        #         event_log.set_label( 0 )
        # else:
        #     if event_id == '1':
        #         event_log.set_label( 1 if ('VirusShare' in event_log.get_image() or self.parent_node.item.get('label', None) == 1) else 0 )
        #     else:
        #         event_log.set_label( 1 if self.parent_node.item.get('label', None) == 1 else 0 )

        return event_log