import win32evtlog
import xml.etree.ElementTree as Et
from datetime import datetime
from anytree import search, Node

from core.event_log import EventLog
from util.util import EVENT_KEY_MAPPING

class EventLogParser:
    def __init__(self, exported_log_file, node_root):
        self.exported_log_file = exported_log_file
        self.node_root = node_root
        self.parent_node = None
        self.file_size = 0
        self.event_logs = []
        self.current_event_logs = []
        self.total = 0
        self.xml_content = None
        self.root = None
        self.ns = None
        self.node = None
        self.offset = -1

    def export_details(self, event: EventLog, id):
        with open(f"event{id}.xml", "w") as f:
            for attribute, value in event.__dict__.items():
                f.write(f"{attribute}: {value}\n")
            f.write("\n")
    
    def get_system_data(self, system, is_text, key, value = None):
        if is_text:
            return system.find(f'{self.ns}{key}').text
        return system.find(f'{self.ns}{key}').get(value)

    def get_all_event_data(self):
        return self.root.find(f'{self.ns}EventData').findall(f'{self.ns}Data')

    def get_all_events(self):
        self.current_event_logs = []

        query_handle = win32evtlog.EvtQuery(str(self.exported_log_file),
            win32evtlog.EvtQueryFilePath | win32evtlog.EvtQueryReverseDirection)

        raw_events = []
        read_event = True
        while read_event:
            raw_event_collection = win32evtlog.EvtNext(query_handle, 1)
            if len(raw_event_collection) == 0:
                break
            for raw_event in raw_event_collection:
                is_add = self.is_add_event(raw_event)
                if not is_add:
                    read_event = False
                    break

                raw_events.insert(0, raw_event)

        for raw_event in raw_events:
            event_log = self.parse_raw_event(raw_event)
            self.event_logs.append( event_log.__dict__ )
            self.current_event_logs.append( event_log.__dict__ )
            self.total += 1
            self.offset = int(event_log.get_event_record_id())

    def is_add_event(self, raw_event):
        self.xml_content = win32evtlog.EvtRender(
            raw_event, win32evtlog.EvtRenderEventXml)
        self.root = Et.fromstring(self.xml_content)
        self.ns = "{" + self.root.tag.split('}')[0].strip('{') + "}"

        system = self.root.find(f'{self.ns}System')
        event_record_id = self.get_system_data(
            system=system,
            is_text=True,
            key='EventRecordID'
        )

        if int(event_record_id) > self.offset:
            return True
        return False

    def parse_raw_event(self, raw_event):
        self.xml_content = win32evtlog.EvtRender(
            raw_event, win32evtlog.EvtRenderEventXml)
        self.root = Et.fromstring(self.xml_content)
        self.ns = "{" + self.root.tag.split('}')[0].strip('{') + "}"

        # custom data
        item = {
            'parent_process_guid': None,
            'utc_time': None,
            'label': None,
        }
        node_id = None
        image = None

        # event log object
        event_log = EventLog()

        # set system data
        system = self.root.find(f'{self.ns}System')

        # Testing
        event_record_id = self.get_system_data(
            system=system,
            is_text=True,
            key='EventRecordID'
        )
        event_log.set_event_record_id(event_record_id)
        system_time_created = self.get_system_data(
            system=system,
            is_text=False,
            key='TimeCreated',
            value='SystemTime'
        )
        event_log.set_system_time_created(system_time_created)

        event_id = self.get_system_data(
            system=system,
            is_text=True,
            key='EventID'
        )
        event_log.set_event_id(event_id)

        # set event data
        event_datas = self.get_all_event_data()
        for event_data in event_datas:
            key = event_data.get('Name')
            key_mapping = EVENT_KEY_MAPPING.get(key, None)
            if key_mapping:
                setattr(event_log, key_mapping, event_data.text)

            if key == 'Image':
                image = event_data.text

            if event_id != '8' and key == 'ProcessGuid':
                node_id = event_data.text
            elif event_id == '8' and key == 'TargetProcessGuid':
                node_id = str(event_id) + event_data.text

            if key == 'UtcTime':
                item['utc_time'] = event_data.text

            if event_id == '1' and key == 'ParentProcessGuid':
                item['parent_process_guid'] = event_data.text
            elif event_id == '8' and key == 'SourceProcessGuid':
                item['parent_process_guid'] = event_data.text
            elif event_id != '1' and event_id != '8' and key == 'ProcessGuid':
                item['parent_process_guid'] = event_data.text
        
        parent = self.node_root
        parents = search.findall_by_attr(self.node_root, item['parent_process_guid'])
        for p in parents:
            if p.name == item['parent_process_guid']:
                parent = p
                break

        if parent == None:
            parent = self.node_root
            if event_id == '1':
                item['label'] = 1 if ('VirusShare' in image) else 0
            else:
                item['label'] = 0
        else:
            parent_label = parent.item.get('label', 0)
            if event_id == '1':
                item['label'] = 1 if ('VirusShare' in image or parent_label == 1) else 0
            else:
                item['label'] = 1 if parent_label == 1 else 0

        event_log.set_image(image)
        event_log.set_label(item['label'])

        Node(node_id, parent = parent, item = item)

        return event_log
