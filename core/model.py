from os.path import join, dirname, realpath

import pandas as pd
import joblib

from util.util import EVENT_TO_DATAFRAME_COLUMN_NAME_MAPPING

class Model():
    def __init__(self, event_log_data):
        self.data = event_log_data
        self.df_init = None
        self.df = None
        self.processed_df = None
        self.features = ['TargetFilename', 'EventID', 'TargetProcessGuid', 'EventType',
            'TargetImage', 'CreationUtcTime', 'DestinationHostname', 'Company',
            'Description', 'Product', 'LogonGuid', 'IntegrityLevel', 'LogonId',
            'ParentProcessGuid', 'TerminalSessionId', 'ParentProcessId', 'RuleName',
            'TargetObject', 'DestinationIp', 'Initiated', 'DestinationPort',
            'label']
        self.MODEL_PATH = join(dirname(realpath(__file__)), 'lof.joblib')
        self.model = None
        self.result = None

    def execute(self):
        # convert data into dataframe
        self.convert_data_to_dataframe()
        self.df_init = self.df.copy()

        # preprocessing data
        self.df.rename(columns = EVENT_TO_DATAFRAME_COLUMN_NAME_MAPPING, inplace = True)
        self.preprocess_data()

        # load model
        self.load_model()

        # predict
        self.result = self.model.predict(self.df)

        # Append result to initial data
        self.df_init['result'] = self.result

    def get_result(self):
        return self.result

    def convert_data_to_dataframe(self):
        self.df = pd.DataFrame.from_records(self.data)

    def load_model(self):
        self.model = joblib.load(self.MODEL_PATH)

    def preprocess_data(self):
        self.df['label'] = self.df['label'].replace(1,-1)
        self.df['label'] = self.df['label'].replace(0,1)
    
        for column in self.df:
            if column == 'EventID' or column == 'label' or column == 'TargetFilename':
                continue
            self.df[column] = (self.df[column].notnull()).astype(int)
        
        self.df['TargetFilename'] = self.df['TargetFilename'].str.len()
        self.df.loc[self.df['TargetFilename'].isnull(), 'TargetFilename'] = 0
        self.df = self.df.reset_index(drop=True)
