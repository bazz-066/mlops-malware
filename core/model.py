import os, signal
from os.path import join, dirname, realpath, isfile
from datetime import datetime

import numpy as np
import pandas as pd
import joblib

from util.util import EVENT_TO_DATAFRAME_COLUMN_NAME_MAPPING, EVENT_TO_DATAFRAME_COLUMN_NAME_MAPPING_CSV_EXPORT

class Model():
    def __init__(self, event_log_data):
        self.MODEL_PATH = join(dirname(realpath(__file__)), '..', 'model', 'lof.joblib')
        self.RESULT_ALL_PATH = 'result-all.csv'
        self.RESULT_MALICIOUS_PATH = 'result-malicious.csv'
        self.data = event_log_data
        self.df_init = None
        self.df = None
        self.model = None
        self.result = None
        self.model_execution_time = None
        self.df_malicious = None    

    def execute(self):
        print('Model execution starts...')
        self.model_execution_time = datetime.now()

        if len(self.data) == 0:
            print('Skip because no event log')
            return
        
        # convert data into dataframe
        self.convert_data_to_dataframe()
        self.df_init = self.df.copy()

        # preprocessing data
        self.df.drop(['system_time_created', 'process_id', 'event_record_id'], axis=1, inplace=True)
        self.df.rename(columns = EVENT_TO_DATAFRAME_COLUMN_NAME_MAPPING, inplace = True)
        self.df_init.rename(columns = EVENT_TO_DATAFRAME_COLUMN_NAME_MAPPING_CSV_EXPORT, inplace = True)

        # Save df to csv
        self.preprocess_data()

        # load model
        self.load_model()

        # predict
        self.result = self.model.predict(self.df)

        # Append result to initial data
        self.df_init['model_execution_time'] = self.model_execution_time
        self.df_init['result'] = self.result

        # Iterate result and detect malicious process
        malicious_events = []
        kill_process_time_all = []
        kill_process_time_malicious = []
        for _, row in self.df_init.iterrows():
            if row['result'] == -1:
                malicious_events.append(row.values)
                if row['EventID'] == '1':
                    # os.kill(row['ProcessId'], signal.SIGSTOP)
                    pass
                now_time = datetime.now()
                kill_process_time_malicious.append(now_time)
                kill_process_time_all.append(now_time)
            else:
                kill_process_time_all.append('-')

        self.df_malicious = pd.DataFrame(data=malicious_events, columns=self.df_init.columns)

        self.df_init['kill_process_time'] = kill_process_time_all
        self.df_malicious['kill_process_time'] = kill_process_time_malicious

        # Save to csv
        if not isfile(self.RESULT_ALL_PATH):
            self.df_init.to_csv(self.RESULT_ALL_PATH, header=True, index=False)
        else:
            self.df_init.to_csv(self.RESULT_ALL_PATH, mode='a', header=False, index=False)

        if not isfile(self.RESULT_MALICIOUS_PATH):
            self.df_malicious.to_csv(self.RESULT_MALICIOUS_PATH, header=True, index=False)
        else:
            self.df_malicious.to_csv(self.RESULT_MALICIOUS_PATH, mode='a', header=False, index=False)
        
        print('Done')

    def get_result(self):
        return self.result

    def convert_data_to_dataframe(self):
        self.df = pd.DataFrame.from_records(self.data)

    def load_model(self):
        self.model = joblib.load(self.MODEL_PATH)

    def preprocess_data(self):
        self.df['label'] = self.df['label'].replace(1,-1)
        self.df['label'] = self.df['label'].replace(0,1)
    
        for column in self.df:
            if column == 'EventID' or column == 'label' or column == 'TargetFilename':
                continue
            self.df[column] = (self.df[column].notnull()).astype(int)
        
        self.df['TargetFilename'] = self.df['TargetFilename'].fillna('')
        self.df['TargetFilename'] = self.df['TargetFilename'].str.len()
        self.df.loc[self.df['TargetFilename'].isnull(), 'TargetFilename'] = 0
        self.df = self.df.reset_index(drop=True)